name: Deploy

on:
  # this will only run if the "Test" workflow completed successfully
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Code
        uses: actions/checkout@v4

      - name: Build the Docker Images
        # we could pass ARGs to the docker builds at this point, if necessary (eg. frontend api url) to bake it in
        run: |
          docker build -t bazmurphy/cloud-tracker-database:latest database
          docker build -t bazmurphy/cloud-tracker-backend:latest backend
          docker build -t bazmurphy/cloud-tracker-frontend:latest frontend

      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Push the Docker Images to DockerHub
        run: |
          docker push bazmurphy/cloud-tracker-database:latest
          docker push bazmurphy/cloud-tracker-backend:latest
          docker push bazmurphy/cloud-tracker-frontend:latest

      - name: Configure SSH on the GitHub Actions Container (Without Using A Third Party Action!)
        # this creates a folder and ssh configuration inside the Github Actions Container itself
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo SSH Configuration Started...
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/ec2.key
            StrictHostKeyChecking no
          END
          echo SSH Configuration Complete!

      # we can now run individual ssh commands using the Host

      - name: Stop the Containers
        run: ssh ec2 'cd cloud-tracker && docker-compose down'

      # - name: Pull the latest code from Github
      #   run: ssh ec2 'cd cloud-tracker && git pull'

      - name: Pull the latest Docker Images from DockerHub
        run: ssh ec2 'docker pull bazmurphy/cloud-tracker-database:latest && docker pull bazmurphy/cloud-tracker-backend:latest && docker pull bazmurphy/cloud-tracker-frontend:latest'

      - name: Restart the Containers
        # might need to pass in -e environment variables (also look into secrets)
        # also removed --build flag
        run: ssh ec2 'cd cloud-tracker && docker-compose up -d'
